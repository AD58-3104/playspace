cmake_minimum_required(VERSION 3.16)
if(WIN32)
    if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
        message("vcpkg is found !!!")
        message("use toolchains in $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake ")
        set(CMAKE_TOOLCHAIN_FILE $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
        set(VCPKG_TARGET_TRIPLET "x64-windows")
        # set(CMAKE_CXX_MP_FLAG ON)
        # set(CMAKE_CXX_MP_NUM_PROCESSORS 16)
    endif()
endif()

project(try CXX)

option(TEST_BUILD "build for unit test" OFF)

# set(Boost_USE_STATIC_RUNTIME ON)
SET(Boost_USE_MULTITHREAD ON)
find_package(Boost 1.77.0 REQUIRED system thread unit_test_framework)

if(TEST_BUILD)
    enable_testing()
    set(TEST_SRC test/test2.cpp )
    # set(Boost_USE_STATIC_LIBS ON)
    message("-------------------------------Test build--------------------------")
    add_executable(time_mes test/time_measure.cpp sUDPSocket.hpp)
    target_compile_features(time_mes  PUBLIC cxx_std_17)
    target_include_directories(time_mes    PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    target_include_directories(time_mes   PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(time_mes  PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(time_mes  ${Boost_LIBRARIES})
    
    add_executable(tcp_sock sAsyncSocket.hpp cm.cpp)
    target_compile_features(tcp_sock  PUBLIC cxx_std_17)
    target_compile_options(tcp_sock PUBLIC -std=c++17)
    target_include_directories(tcp_sock  PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(tcp_sock  ${Boost_LIBRARIES})

    add_executable(test_exe ${TEST_SRC} sUDPSocket.hpp)
    target_compile_features(test_exe  PUBLIC cxx_std_17)
    # target_compile_definitions(test_exe PRIVATE "DEBUG_SUDPSOCKET=1")
    target_include_directories(test_exe    PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    target_include_directories(test_exe   PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(test_exe  PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(test_exe  ${Boost_LIBRARIES})
    add_test(NAME sockettest COMMAND test_exe --log_level=test_suite)
else()
    message("-------------------------------release build--------------------------")
    add_executable(server servermain.cpp sAsyncSocket.hpp)
    add_executable(client clientmain.cpp sAsyncSocket.hpp)
    target_compile_features(server  PUBLIC cxx_std_17)
    target_include_directories(server  PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    target_include_directories(server PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(server ${Boost_LIBRARIES})
    
    
    target_compile_features(client  PUBLIC cxx_std_17)
    target_include_directories(client  PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    target_include_directories(client PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(client ${Boost_LIBRARIES})
    if(NOT WIN32)
        message("compile option!!!")
        target_compile_options(server  PUBLIC -Wall -pedantic-errors) 
        target_compile_options(client  PUBLIC -Wall -pedantic-errors) 
    endif()
endif()
    
# install (TARGETS client DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin)
