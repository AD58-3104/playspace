cmake_minimum_required(VERSION 3.10)
if(WIN32)
    if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
        message("vcpkg is found !!!")
        message("use toolchains in $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake ")
        set(CMAKE_TOOLCHAIN_FILE $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
        set(VCPKG_TARGET_TRIPLET "x64-windows")
        # set(CMAKE_CXX_MP_FLAG ON)
        # set(CMAKE_CXX_MP_NUM_PROCESSORS 16)
    endif()
endif()

project(try)
# SET(Boost_USE_STATIC_LIBS ON)
# set(Boost_USE_STATIC_RUNTIME ON)
#SET(Boost_USE_MULTITHREAD ON)
find_package(Boost REQUIRED system thread )

add_executable(server servermain.cpp header.hpp)
add_executable(client clientmain.cpp header.hpp)

target_compile_features(server  PUBLIC cxx_std_17)
target_include_directories(server  PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(server PRIVATE ${Boost_INCLUDE_DIRS})
target_link_libraries(server ${Boost_LIBRARIES})


target_compile_features(client  PUBLIC cxx_std_17)
target_include_directories(client  PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(client PRIVATE ${Boost_INCLUDE_DIRS})
target_link_libraries(client ${Boost_LIBRARIES})

if(not WIN32)
    message("compile option!!!")
    target_compile_options(server  PUBLIC -Wall -pedantic-errors) 
    target_compile_options(client  PUBLIC -Wall -pedantic-errors) 
endif()
# install (TARGETS client DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin)